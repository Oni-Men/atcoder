{
	"Union Tree": {
		"prefix": "union_tree",
		"body": [
			"class UnionTree:",
			"    def __init__(self, vertices) -> None:",
			"        self.tree = {}",
			"        for v in vertices:",
			"            self.tree[v] = None",
			"",
			"    def root(self, x) -> int:",
			"        if self.tree[x] == None:",
			"            return x",
			"        return self.root(self.tree[x])",
			"",
			"    def is_same(self, x, y) -> bool:",
			"        return self.root(x) == self.root(y)",
			"",
			"    def unite(self, x, y) -> None:",
			"        x = self.root(x)",
			"        y = self.root(y)",
			"        self.tree[x] = y",
		],
	},
	"BFS": {
		"prefix": [
			"bfs"
		],
		"body": [
			"from collections import deque",
			"",
			"E = [[] for _ in range($1)]",
			"for _ in range(N):",
			"    a, b = map(int, input().split())",
			"    E[a].append(b)",
			"    E[b].append(a)",
			"",
			"q = deque()",
			"visited = [False] * ($1)",
			"q.append($2)",
			"",
			"while q:",
			"    i = q.popleft()",
			"    if visited[i]:",
			"        continue",
			"    visited[i] = True",
			"    for j in E[i]:",
			"        q.append(j)"
		]
	},
	"DFS": {
		"prefix": [
			"dfs"
		],
		"body": [
			"from collections import deque",
			"",
			"E = [[] for _ in range($1)]",
			"for _ in range(N):",
			"    a, b = map(int, input().split())",
			"    E[a].append(b)",
			"    E[b].append(a)",
			"",
			"q = deque()",
			"visited = [False] * ($1)",
			"q.append($2)",
			"",
			"while q:",
			"    i = q.pop()",
			"    if visited[i]:",
			"        continue",
			"    visited[i] = True",
			"    for j in E[i]:",
			"        q.append(j)"
		]
	},
	"Previous Permutaion": {
		"prefix": "prev_permutation",
		"body": [
			"def prev_permutation(p):",
			"    n = len(p)",
			"    i = n-2",
			"    while p[i] < p[i+1]:",
			"        i -= 1",
			"",
			"    j = n - 1",
			"    while p[i] < p[j]:",
			"        j -= 1",
			"",
			"    p[i], p[j] = p[j], p[i]",
			"    return p[:i+1] + p[:i:-1]"
		]
	},
	"Input Integer List": {
		"prefix": "mapint",
		"body": [ "map(int, input().split())" ],
	}
}